/* This file is part of Ezra Bible App.

   Copyright (C) 2019 - 2021 Ezra Bible App Development Team <contact@ezrabibleapp.net>

   Ezra Bible App is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 2 of the License, or
   (at your option) any later version.

   Ezra Bible App is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Ezra Bible App. See the file LICENSE.
   If not, see <http://www.gnu.org/licenses/>. */

const i18nHelper = require('../helpers/i18n_helper.js');
const marked = require('marked');


/**
 * The ExportController implements the export of certain verses with notes or tags into a Word document.
 *
 * @category Controller
 */


var exportFilePath = null;

module.exports.showSaveDialog = async function (fileTitle) {
  const dialog = require('electron').remote.dialog;
  var dialogOptions = getExportDialogOptions(fileTitle);

  return dialog.showSaveDialog(null, dialogOptions).then(result => {
    exportFilePath = result.filePath;

    if (!result.canceled && exportFilePath != undefined) {
      return exportFilePath;
    } else {
      return null;
    }
  });
};

module.exports.saveWordDocument = async function(title, bibleBooks, verses) {
  const officegen = require('officegen');
  const fs = require('fs');
  const shell = require('electron').remote.shell;

  const titleWrapper = document.createElement('p');
  titleWrapper.innerHTML = marked(title);
  const titleParts = titleWrapper.firstElementChild.childNodes;

  var docx = officegen({
    type: 'docx',
    title: titleWrapper.textContent,
    description: 'Automatically generated by Ezra Bible App',
    pageMargins: {
      top: 1200,
      bottom: 1200,
      left: 1000,
      right: 1000
    }
  });

  // Officegen calling this function after finishing to generate the docx document:
  docx.on('finalize', (written) => {
    shell.openPath(exportFilePath);
  });

  // Officegen calling this function to report errors:
  docx.on('error', function(err) {
    console.log(err);
  });
  
  var p = docx.createP();
  
  for(let i = 0; i < titleParts.length; i++) {
    p.addText(titleParts[i].textContent, { font_size: 14, bold: true, italic: titleParts[i].nodeName == 'EM' });
  }
  p.addLineBreak();
  p.addLineBreak();

  for (let i = 0; i < bibleBooks.length; i++) {
    const currentBook = bibleBooks[i];
    const bookTitle = await i18nHelper.getSwordTranslation(currentBook.longTitle);

    p.addText(bookTitle, { bold: true });
    p.addLineBreak();

    const allBlocks = getBibleBookVerseBlocks(currentBook, verses);
    await renderVerseBlocks(p, currentBook, allBlocks);

    // Line break after book end
    p.addLineBreak();
  }

  //console.log("Generating word document " + this.saveFilePath);
  var out = fs.createWriteStream(exportFilePath);

  out.on('error', function(err) {
    console.log(err);
  });

  // Async call to generate the output file:
  docx.generate(out);
};


function getExportDialogOptions(title) {
  const app = require('electron').remote.app;
  var today = new Date();
  var month = getPaddedNumber(today.getMonth() + 1);
  var day = getPaddedNumber(today.getDate());
  var date = today.getFullYear() + '_' + month + '_' + day;
  var fileName = date + '__' + title + '.docx';

  var dialogOptions = {
    defaultPath: app.getPath('documents') + '/' + fileName,
    title: i18n.t("tags.export-tagged-verse-list"),
    buttonLabel: i18n.t("tags.run-export")
  };

  return dialogOptions;
}

function getPaddedNumber(number) {
  var paddedNumber = "" + number;
  if (number < 10) {
    paddedNumber = "0" + number;
  }
  return paddedNumber;
}

function getBibleBookVerseBlocks(bibleBook, verses) {
  var lastVerseNr = 0;
  var allBlocks = [];
  var currentBlock = [];

  // Transform the list of verses into a list of verse blocks (verses that belong together)
  for (var j = 0; j < verses.length; j++) {
    var currentVerse = verses[j];

    if (currentVerse.bibleBookShortTitle == bibleBook.shortTitle) {

      if (currentVerse.absoluteVerseNr > (lastVerseNr + 1)) {
        if (currentBlock.length > 0) {
          allBlocks.push(currentBlock);
        }
        currentBlock = [];
      }
      
      currentBlock.push(currentVerse);
      lastVerseNr = currentVerse.absoluteVerseNr;
    }
  }

  allBlocks.push(currentBlock);

  return allBlocks;
}

async function renderVerseBlocks(paragraph, bibleBook, verseBlocks) {
  const bibleTranslationId = app_controller.tab_controller.getTab().getBibleTranslationId();
  const separator = await i18nHelper.getReferenceSeparator(bibleTranslationId);

  for (let j = 0; j < verseBlocks.length; j++) {
    const currentBlock = verseBlocks[j];

    const firstVerse = currentBlock[0];
    const lastVerse = currentBlock[currentBlock.length - 1];
    
    // Output the verse reference of this block
    const bookTitle = await i18nHelper.getSwordTranslation(bibleBook.longTitle);
    paragraph.addText(bookTitle);
    paragraph.addText(" " + firstVerse.chapter + separator + firstVerse.verseNr);

    if (currentBlock.length >= 2) { // At least 2 verses, a bigger block
      let secondRef = "";

      if (lastVerse.chapter == firstVerse.chapter) {
        secondRef = "-" + lastVerse.verseNr;
      } else {
        secondRef = " - " + lastVerse.chapter + separator + lastVerse.verseNr;
      }

      paragraph.addText(secondRef);
    }
    paragraph.addLineBreak();

    for (let k = 0; k < currentBlock.length; k++) {
      const currentVerse = currentBlock[k];
      let currentVerseContent = "";
      const currentVerseNodes = $(jQuery.parseHTML(currentVerse.content));
      
      for (let i = 0; i < currentVerseNodes.length; i++) {
        const currentNode = $(currentVerseNodes[i]);
        const currentNodeName = currentNode[0].nodeName;
        // We export everything that is not a DIV
        // DIV elements contain markup that should not be in the word document
        if (currentNodeName != 'DIV') {
          currentVerseContent += currentNode.text();
        }
      }
    
      paragraph.addText(currentVerse.verseNr + "", { superscript: true });
      paragraph.addText(" " + currentVerseContent);
      paragraph.addLineBreak();
    }

    // Line break after block end
    paragraph.addLineBreak();
  }
}
